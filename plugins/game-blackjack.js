class Blackjack {\n    decks;\n    state = \"waiting\";\n    player = [];\n    dealer = [];\n    table = {\n        player: {\n            total: 0,\n            cards: [],\n        },\n        dealer: {\n            total: 0,\n            cards: [],\n        },\n        bet: 0,\n        payout: 0,\n        doubleDowned: false,\n    };\n    cards;\n    endHandlers = [];\n    constructor(decks) {\n        this.decks = validateDeck(decks);\n    }\n    placeBet(bet) {\n        if (bet <= 0) {\n            throw new Error(\"يجب أن تضع رهانًا أكبر من 0\");\n        }\n        this.table.bet = bet;\n    }\n    start() {\n        if (this.table.bet <= 0) {\n            throw new Error(\"يجب عليك وضع رهان قبل بدء اللعبة\");\n        }\n        this.cards = new Deck(this.decks);\n        this.cards.shuffleDeck(2);\n        this.player = this.cards.dealCard(2);\n        let dealerFirstCard;\n        do {\n            dealerFirstCard = this.cards.dealCard(1)[0];\n        } while (dealerFirstCard.value > 11);\n        this.dealer = [dealerFirstCard, ...this.cards.dealCard(1)];\n        this.updateTable();\n        return this.table;\n    }\n    hit() {\n        if (this.state === \"waiting\") {\n            const newCard = this.cards.dealCard(1)[0];\n            this.player.push(newCard);\n            this.updateTable();\n            const playerSum = sumCards(this.player);\n            const dealerSum = sumCards(this.dealer);\n            if (playerSum === dealerSum) {\n                this.state = \"draw\";\n                this.emitEndEvent();\n            }\n            else if (playerSum === 21) {\n                this.state = \"player_blackjack\";\n                this.emitEndEvent();\n            }\n            else if (playerSum > 21) {\n                this.state = \"dealer_win\";\n                this.emitEndEvent();\n            }\n            return this.table;\n        }\n    }\n    stand() {\n        let dealerSum = sumCards(this.dealer);\n        let playerSum = sumCards(this.player);\n        if (playerSum <= 21) {\n            while (dealerSum < 17) {\n                this.dealer.push(...this.cards.dealCard(1));\n                dealerSum = sumCards(this.dealer);\n                this.updateTable();\n            }\n        }\n        if (playerSum <= 21 && (dealerSum > 21 || dealerSum < playerSum)) {\n            if (playerSum === 21) {\n                this.state = \"player_blackjack\";\n            }\n            else {\n                this.state = \"player_win\";\n            }\n        }\n        else if (dealerSum === playerSum) {\n            this.state = \"draw\";\n        }\n        else {\n            this.state = dealerSum === 21 ? \"dealer_blackjack\" : \"dealer_win\";\n        }\n        this.emitEndEvent();\n    }\n    doubleDown() {\n        if (this.canDoubleDown()) {\n            this.table.doubleDowned = true;\n            this.player.push(...this.cards.dealCard(1));\n            this.updateTable();\n            this.stand();\n        }\n        else {\n            throw new Error(\"يمكنك المضاعفة فقط في الدور الأول\");\n        }\n    }\n    calculatePayout() {\n        if (this.state === \"player_blackjack\") {\n            this.table.payout = this.table.bet * 1.5;\n        }\n        else if (this.state === \"player_win\") {\n            this.table.payout = this.table.bet;\n        }\n        else if (this.state === \"dealer_win\" ||\n            this.state === \"dealer_blackjack\") {\n            this.table.payout = 0;\n        }\n        else if (this.state === \"draw\") {\n            this.table.payout = this.table.bet;\n        }\n        if (this.table.doubleDowned && this.state !== \"draw\") {\n            this.table.payout *= 2;\n        }\n        this.table.payout = Math.round(this.table.payout);\n    }\n    canDoubleDown() {\n        return this.state === \"waiting\" && this.player.length === 2;\n    }\n    onEnd(handler) {\n        this.endHandlers.push(handler);\n    }\n    emitEndEvent() {\n        this.calculatePayout();\n        for (let handler of this.endHandlers) {\n            handler({\n                state: this.state,\n                player: formatCards(this.player),\n                dealer: formatCards(this.dealer),\n                bet: this.table.bet,\n                payout: this.table.payout,\n            });\n        }\n    }\n    updateTable() {\n        this.table.player = formatCards(this.player);\n        this.table.dealer = formatCards(this.dealer);\n    }\n}\n\nclass Deck {\n    deck = [];\n    dealtCards = [];\n    constructor(decks) {\n        for (let i = 0; i < decks; i++) {\n            this.createDeck();\n        }\n    }\n    createDeck() {\n        const card = (suit, value) => {\n            let name = value + \" من \" + suit;\n            if (value.toUpperCase().includes(\"J\") ||\n                value.toUpperCase().includes(\"Q\") ||\n                value.toUpperCase().includes(\"K\"))\n                value = \"10\";\n            if (value.toUpperCase().includes(\"A\"))\n                value = \"11\";\n            return { name, suit, value: +value };\n        };\n        const values = [\n            \"2\",\n            \"3\",\n            \"4\",\n            \"5\",\n            \"6\",\n            \"7\",\n            \"8\",\n            \"9\",\n            \"10\",\n            \"J\",\n            \"Q\",\n            \"K\",\n            \"A\",\n        ];\n        const suits = [\"♣️\", \"♦️\", \"♠️\", \"♥️\"];\n        for (let s = 0; s < suits.length; s++) {\n            for (let v = 0; v < values.length; v++) {\n                this.deck.push(card(suits[s], values[v]));\n            }\n        }\n    }\n    shuffleDeck(amount = 1) {\n        for (let i = 0; i < amount; i++) {\n            for (let c = this.deck.length - 1; c >= 0; c--) {\n                const tempVal = this.deck[c];\n                let randomIndex = Math.floor(Math.random() * this.deck.length);\n                while (randomIndex === c) {\n                    randomIndex = Math.floor(Math.random() * this.deck.length);\n                }\n                this.deck[c] = this.deck[randomIndex];\n                this.deck[randomIndex] = tempVal;\n            }\n        }\n    }\n    dealCard(numCards) {\n        const cards = [];\n        for (let c = 0; c < numCards; c++) {\n            const dealtCard = this.deck.shift();\n            if (dealtCard) {\n                cards.push(dealtCard);\n                this.dealtCards.push(dealtCard);\n            }\n        }\n        return cards;\n    }\n}\n\nfunction sumCards(cards) {\n    let value = 0;\n    let numAces = 0;\n    for (const card of cards) {\n        value += card.value;\n        numAces += card.value === 11 ? 1 : 0;\n    }\n    while (value > 21 && numAces > 0) {\n        value -= 10;\n    }\n    return value;\n}\n\nfunction formatCards(cards) {\n    return { total: sumCards(cards), cards };\n}\n\nfunction validateDeck(decks) {\n    if (!decks) {\n        throw new Error(\"يجب أن يحتوي الطابق على عدد من الطوابق\");\n    }\n    if (decks < 1) {\n        throw new Error(\"يجب أن يحتوي الطابق على طابق واحد على الأقل\");\n    }\n    if (decks > 8) {\n        throw new Error(\"يمكن أن يحتوي الطابق على 8 طوابق على الأكثر\");\n    }\n    return decks;\n}\n\nconst formatter = new Intl.NumberFormat(\'ar-EG\');\n\nconst templateBlackjackMessage = (usedPrefix, command, conn, m, blackjack) => {\n    const { table, state } = blackjack;\n    const { bet, dealer, player, payout } = table;\n    let message = \'\';\n    const dealerCards = dealer.cards.map(card => `${card.name}`).join(\', \');\n    const dealerTotal = dealer.total;\n    const playerCards = player.cards.map(card => `${card.name}`).join(\', \');\n    const playerTotal = player.total;\n\n    let hiddenDealerCards = dealer.cards.slice(0, -1).map(card => `${card.name}`).join(\', \');\n    if (dealer.cards.length > 1) {\n        hiddenDealerCards += \', ❓\';\n    } else {\n        hiddenDealerCards += `, ${dealer.cards[0].name}`;\n    }\n    \n    switch (state) {\n        case \"player_win\":\n        case \"dealer_win\":\n        case \"draw\":\n        case \"player_blackjack\":\n        case \"dealer_blackjack\":\n            hiddenDealerCards = dealer.cards.map(card => `${card.name}`).join(\', \');\n            message = `*\\`🃏 • بـــلاك جــــاك •\\`*\n\n╭───┈ •\n│ *بطاقاتك:*\n│ \\`${playerCards}\\`\n│ *مجموعك:*\n│ \\`${playerTotal}\\`\n├───┈ •\n│ *بطاقات الموزع:*\n│ \\`${dealerCards}\\`\n│ *مجموع الموزع:*\n│ \\`${dealerTotal > 21 ? \'تجاوز\' : dealerTotal}\\`\n╰───┈ •\n\n> *\\`${(state === \"player_win\" ? \"لقد فزت! 🎉\" : state === \"dealer_win\" ? \"الموزع يفوز. 😔\" : state === \"draw\" ? \"تعادل. 🤝\" : state === \"player_blackjack\" ? \"بلاك جاك! 🥳\" : \"الموزع حصل على بلاك جاك! 😔\").toUpperCase()}\\`*\\n*الرهان:*\n- \\`\\`\\`${formatter.format(bet)} نقطة\`\\`\\`\\n*العائد:*\n- \\`\\`\\`${formatter.format(payout)} نقطة\`\\`\\`\n`;\n            global.db.data.users[conn.blackjack[m.chat].idPemain].exp += 1000\n            delete conn.blackjack[m.chat];\n            break;\n        default:\n            message = `*\\`🃏 • بـــلاك جــــاك •\\`*\n\n╭───┈ •\n│ *بطاقاتك:*\n│ \\`${playerCards}\\`\n│ *مجموعك:*\n│ \\`${playerTotal}\\`\n├───┈ •\n│ *بطاقات الموزع:*\n│ \\`${hiddenDealerCards}\\`\n│ *مجموع الموزع:*\n│ \\`${dealerTotal > 21 ? \'تجاوز\' : \'❓\'}\\`\n╰───┈ •\n\n*الرهان:*\n- \\`\\`\\`${formatter.format(bet)} نقطة\`\\`\\`\n\nاكتب *\\`${usedPrefix + command} hit\\`* لسحب بطاقة.\nاكتب *\\`${usedPrefix + command} stand\\`* لإنهاء دورك.`;\n            break;\n    }\n    return message;\n}\n\nconst handler = async (m, { conn, usedPrefix, command, args }) => {\n    conn.blackjack = conn.blackjack || {};\n    let [aksi, argumen] = args;\n\n    try {\n        switch (aksi) {\n            case \'end\':\n                if (conn.blackjack[m.chat]?.idPemain === m.sender) {\n                    delete conn.blackjack[m.chat];\n                    await conn.reply(m.chat, \'*لقد خرجت من جلسة البلاك جاك.* 👋\', m);\n                } else {\n                    await conn.reply(m.chat, \'*لا توجد جلسة بلاك جاك جارية أو أنك لست اللاعب.*\', m);\n                }\n                break;\n\n            case \'start\':\n                if (conn.blackjack[m.chat]) {\n                    await conn.reply(m.chat, `*جلسة البلاك جاك جارية بالفعل.* استخدم *${usedPrefix + command} end* للخروج من الجلسة.`, m);\n                } else {\n                    conn.blackjack[m.chat] = new Blackjack(1);\n                    conn.blackjack[m.chat].idPemain = m.sender;\n                    let betAmount = argumen ? parseInt(argumen) : 1000;\n                    conn.blackjack[m.chat].placeBet(betAmount);\n                    conn.blackjack[m.chat].start();\n                    const table = conn.blackjack[m.chat];\n                    const pesanStart = templateBlackjackMessage(usedPrefix, command, conn, m, table);\n                    await conn.reply(m.chat, pesanStart, m);\n                }\n                break;\n\n            case \'hit\':\n                if (!conn.blackjack[m.chat] || conn.blackjack[m.chat]?.idPemain !== m.sender) {\n                    await conn.reply(m.chat, \'*أنت لا تلعب البلاك جاك أو أنك لست اللاعب.*\', m);\n                    break;\n                }\n                conn.blackjack[m.chat].hit();\n                const tableHit = conn.blackjack[m.chat];\n                const pesanHit = templateBlackjackMessage(usedPrefix, command, conn, m, tableHit);\n                await conn.reply(m.chat, pesanHit, m);\n                break;\n\n            case \'stand\':\n                if (!conn.blackjack[m.chat] || conn.blackjack[m.chat]?.idPemain !== m.sender) {\n                    await conn.reply(m.chat, \'*أنت لا تلعب البلاك جاك أو أنك لست اللاعب.*\', m);\n                    break;\n                }\n                conn.blackjack[m.chat].stand();\n                const tableStand = conn.blackjack[m.chat];\n                const pesanStand = templateBlackjackMessage(usedPrefix, command, conn, m, tableStand);\n                await conn.reply(m.chat, pesanStand, m);\n                break;\n\n            case \'double\':\n                if (!conn.blackjack[m.chat] || conn.blackjack[m.chat]?.idPemain !== m.sender) {\n                    await conn.reply(m.chat, \'*أنت لا تلعب البلاك جاك أو أنك لست اللاعب.*\', m);\n                    break;\n                }\n                conn.blackjack[m.chat].doubleDown();\n                const tableDouble = conn.blackjack[m.chat];\n                const pesanDouble = templateBlackjackMessage(usedPrefix, command, conn, m, tableDouble);\n                await conn.reply(m.chat, pesanDouble, m);\n                break;\n\n            default:\n                await conn.reply(m.chat, `*أمر غير صالح.*\\nاستخدم *${usedPrefix + command} start* لبدء جلسة بلاك جاك.`, m);\n                break;\n        }\n    } catch (err) {\n        console.error(err);\n        await conn.reply(m.chat, \'*حدث خطأ أثناء معالجة الأمر.*\', m);\n    }\n}\n\nhandler.command = [\'blackjack\', \'بلاكجاك\'];\nhandler.tags = [\'game\'];\nhandler.help = [\'blackjack\'];\n\nexport default handler;