import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ุงูุญุตูู ุนูู __dirname ูู ES Modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ุฅุนุฏุงุฏุงุช ุงููููุงุช ูุงููุฌูุฏุงุช
const commandsDir = './plugins'; // ูุฌูุฏ ุงูุฃูุงูุฑ
const outputFile = './commands_list.txt'; // ููู ุงูุฅุฎุฑุงุฌ

// ูุงููุณ ุงูุชุตูููุงุช
const categoryNames = {
    'main': 'ุงูุฑุฆูุณูุฉ',
    'ai': 'ููุฒุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู',
    'memfess': 'ุงุนุชุฑุงูุงุช',
    'downloader': 'ุฃุฏูุงุช ุงูุชุญููู',
    'internet': 'ุงูุฅูุชุฑูุช',
    'anime': 'ุฃููู',
    'sticker': 'ููุตูุงุช',
    'tools': 'ุฃุฏูุงุช',
    'group': 'ูุฌููุนุฉ',
    'fun': 'ุชุฑููู',
    'search': 'ุจุญุซ',
    'game': 'ุฃูุนุงุจ',
    'info': 'ูุนูููุงุช',
    'owner': 'ุงููุงูู',
    'quotes': 'ุงูุชุจุงุณุงุช',
    'exp': 'ุฎุจุฑุฉ',
    'stalk': 'ูุทุงุฑุฏุฉ',
    'rpg': 'ุขุฑ ุจู ุฌู',
    'sound': 'ุตูุช',
    'random': 'ุนุดูุงุฆู',
    'maker': 'ุตุงูุน',
    'panel': 'ููุญุฉ ุงูุชุญูู',
    'nsfw': 'ูุญุชูู ููุจุงูุบูู'
};

function extractHandlerInfo(fileContent, filename) {
    const handlerInfo = {
        file: filename,
        help: [],
        tags: [],
        commands: [],
        group: false,
        limit: null,
        categories: []
    };

    // ุงุณุชุฎุฑุงุฌ handler.help
    const helpMatches = fileContent.match(/handler\.help\s*=\s*(\[.*?\]|['"`].*?['"`])/g);
    if (helpMatches) {
        helpMatches.forEach(match => {
            const helpValue = match.match(/handler\.help\s*=\s*(\[.*?\]|['"`].*?['"`])/)[1];
            try {
                // ุงุณุชุฎุฏุงู Function ุจุฏูุงู ูู eval ูุฃูุงู ุฃูุถู
                const parsed = new Function(`return ${helpValue}`)();
                if (Array.isArray(parsed)) {
                    handlerInfo.help.push(...parsed);
                } else {
                    handlerInfo.help.push(parsed);
                }
            } catch (e) {
                // ุฅุฐุง ูุดู ุงูุชุญูููุ ูุณุชุฎุฏู ุงููููุฉ ููุง ูู
                const cleanValue = helpValue.replace(/^['"`]|['"`]$/g, '');
                handlerInfo.help.push(cleanValue);
            }
        });
    }

    // ุงุณุชุฎุฑุงุฌ handler.tags
    const tagsMatches = fileContent.match(/handler\.tags\s*=\s*(\[.*?\]|['"`].*?['"`])/g);
    if (tagsMatches) {
        tagsMatches.forEach(match => {
            const tagsValue = match.match(/handler\.tags\s*=\s*(\[.*?\]|['"`].*?['"`])/)[1];
            try {
                const parsed = new Function(`return ${tagsValue}`)();
                if (Array.isArray(parsed)) {
                    handlerInfo.tags.push(...parsed);
                    // ุฅุถุงูุฉ ุงูุชุตูููุงุช ุงููุชุฑุฌูุฉ
                    parsed.forEach(tag => {
                        if (categoryNames[tag]) {
                            handlerInfo.categories.push(categoryNames[tag]);
                        }
                    });
                } else {
                    handlerInfo.tags.push(parsed);
                    if (categoryNames[parsed]) {
                        handlerInfo.categories.push(categoryNames[parsed]);
                    }
                }
            } catch (e) {
                const cleanValue = tagsValue.replace(/^['"`]|['"`]$/g, '');
                handlerInfo.tags.push(cleanValue);
            }
        });
    }

    // ุงุณุชุฎุฑุงุฌ handler.command
    const commandMatches = fileContent.match(/handler\.command\s*=\s*(.*?)(?=;|\n|$)/g);
    if (commandMatches) {
        commandMatches.forEach(match => {
            let commandValue = match.replace(/handler\.command\s*=\s*/, '').trim();
            // ุชูุธูู ุงููููุฉ ูู ุงููุงุตูุฉ ุงูููููุทุฉ ูู ุงูููุงูุฉ ุฅุฐุง ูุฌุฏุช
            commandValue = commandValue.replace(/;$/g, '');
            handlerInfo.commands.push(commandValue);
        });
    }

    // ุงุณุชุฎุฑุงุฌ handler.group
    const groupMatch = fileContent.match(/handler\.group\s*=\s*(true|false)/);
    if (groupMatch) {
        handlerInfo.group = groupMatch[1] === 'true';
    }

    // ุงุณุชุฎุฑุงุฌ handler.limit
    const limitMatch = fileContent.match(/handler\.limit\s*=\s*(true|false|\d+)/);
    if (limitMatch) {
        handlerInfo.limit = limitMatch[1];
    }

    return handlerInfo;
}

function scanCommandsDirectory(dirPath) {
    const commands = [];
    
    function scanDirectory(currentPath) {
        if (!fs.existsSync(currentPath)) {
            console.log(`โ ุงููุฌูุฏ ุบูุฑ ููุฌูุฏ: ${currentPath}`);
            return;
        }
        
        const items = fs.readdirSync(currentPath);
        
        for (const item of items) {
            const fullPath = path.join(currentPath, item);
            const stat = fs.statSync(fullPath);
            
            if (stat.isDirectory()) {
                scanDirectory(fullPath);
            } else if (item.endsWith('.js')) {
                try {
                    const content = fs.readFileSync(fullPath, 'utf8');
                    // ุงูุชุญูู ุฅุฐุง ูุงู ุงูููู ูุญุชูู ุนูู handler
                    if (content.includes('handler.') && 
                        (content.includes('handler.help') || content.includes('handler.command'))) {
                        const handlerInfo = extractHandlerInfo(content, item);
                        commands.push(handlerInfo);
                        console.log(`โ ุชู ูุนุงูุฌุฉ: ${item}`);
                    }
                } catch (error) {
                    console.log(`โ ุฎุทุฃ ูู ูุฑุงุกุฉ ุงูููู: ${fullPath} - ${error.message}`);
                }
            }
        }
    }
    
    scanDirectory(dirPath);
    return commands;
}

function generateOutput(commands) {
    let output = '๐ค ูุงุฆูุฉ ุฌููุน ุงูุฃูุงูุฑ - ุงูุจูุช\n';
    output += '='.repeat(60) + '\n\n';
    
    // ุชุตููู ุงูุฃูุงูุฑ ุญุณุจ ุงูุชุตูููุงุช
    const commandsByCategory = {};
    
    commands.forEach(cmd => {
        if (cmd.categories.length > 0) {
            cmd.categories.forEach(category => {
                if (!commandsByCategory[category]) {
                    commandsByCategory[category] = [];
                }
                commandsByCategory[category].push(cmd);
            });
        } else {
            if (!commandsByCategory['ุบูุฑ ูุตูู']) {
                commandsByCategory['ุบูุฑ ูุตูู'] = [];
            }
            commandsByCategory['ุบูุฑ ูุตูู'].push(cmd);
        }
    });
    
    // ุนุฑุถ ุงูุฃูุงูุฑ ูุตููุฉ
    Object.keys(commandsByCategory).sort().forEach(category => {
        output += `\n๐ ${category.toUpperCase()}\n`;
        output += 'โ'.repeat(40) + '\n';
        
        commandsByCategory[category].forEach((cmd, index) => {
            output += `\n${index + 1}. ๐ ${cmd.file}\n`;
            output += `   ๐ ุงููุณุงุนุฏุฉ: ${cmd.help.join(' | ') || 'ูุง ููุฌุฏ'}\n`;
            output += `   ๐ท๏ธ  ุงูุชุตูููุงุช: ${cmd.tags.join(', ') || 'ูุง ููุฌุฏ'}\n`;
            output += `   โก ุงูุฃูุฑ: ${cmd.commands.join(' | ') || 'ูุง ููุฌุฏ'}\n`;
            output += `   ๐ฅ ูููุฌููุนุงุช: ${cmd.group ? 'โ ูุนู' : 'โ ูุง'}\n`;
            output += `   ๐ ุงูุญุฏ: ${cmd.limit !== null ? cmd.limit : 'ุบูุฑ ูุญุฏุฏ'}\n`;
        });
        output += '\n';
    });
    
    // ููุฎุต ุนุงู
    output += '\n' + '='.repeat(60) + '\n';
    output += `๐ ุงูููุฎุต:\n`;
    output += `โข ุฅุฌูุงูู ุงูุฃูุงูุฑ: ${commands.length}\n`;
    output += `โข ุนุฏุฏ ุงูุชุตูููุงุช: ${Object.keys(commandsByCategory).length}\n`;
    output += `โข ุงูุชุตูููุงุช: ${Object.keys(commandsByCategory).join(', ')}\n`;
    output += `\n๐ ุชู ุงูุฅูุดุงุก ูู: ${new Date().toLocaleString('ar-SA')}\n`;
    
    return output;
}

// ุงูุชุดุบูู ุงูุฑุฆูุณู
async function main() {
    console.log('๐ ุจุฏุก ูุณุญ ุฃูุงูุฑ ุงูุจูุช...\n');
    
    try {
        const allCommands = scanCommandsDirectory(commandsDir);
        
        if (allCommands.length === 0) {
            console.log('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃู ุฃูุงูุฑ!');
            console.log('๐ก ุชุฃูุฏ ูู:');
            console.log('   1. ูุฌูุฏ ูุฌูุฏ plugins ูู ุงููุณุงุฑ ุงูุตุญูุญ');
            console.log('   2. ุฃู ุงููููุงุช ุชุญุชูู ุนูู handler');
            console.log('   3. ุฃู ุงููููุงุช ููุง ุงูุชุฏุงุฏ .js');
            return;
        }
        
        console.log('\n๐ ุฌุงุฑู ุฅูุดุงุก ููู ุงูุฃูุงูุฑ...');
        const outputContent = generateOutput(allCommands);
        
        fs.writeFileSync(outputFile, outputContent, 'utf8');
        console.log(`\nโ ุชู ุฅูุดุงุก ุงูููู ุจูุฌุงุญ: ${outputFile}`);
        console.log(`๐ ุนุฏุฏ ุงูุฃูุงูุฑ ุงูููุชุดูุฉ: ${allCommands.length}`);
        console.log(`๐ ุงูุชุตูููุงุช ุงููุณุชุฎุฏูุฉ: ${Object.keys(commandsByCategory).length}`);
        
        // ุนุฑุถ ุนููุฉ ูู ุงูุฃูุงูุฑ
        console.log('\n๐ ุนููุฉ ูู ุงูุฃูุงูุฑ:');
        allCommands.slice(0, 3).forEach((cmd, i) => {
            console.log(`${i + 1}. ${cmd.file} - ${cmd.help[0] || 'ุจุฏูู ูุตู'}`);
        });
        if (allCommands.length > 3) {
            console.log(`... ู ${allCommands.length - 3} ุฃูุฑ ุขุฎุฑ`);
        }
        
    } catch (error) {
        console.log('โ ุญุฏุซ ุฎุทุฃ:', error.message);
    }
}

// ุชุดุบูู ุงูุจุฑูุงูุฌ
main();
